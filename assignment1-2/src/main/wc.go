package main

import (
	"fmt"
	"log"
	"mapreduce"
	"os"
	"strconv"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// TODO: you have to write this function
	// file, err := os.Open(document)
	// checkError(err)
	var result []mapreduce.KeyValue
	startIndex := -1
	isCounting := false
	runes := []rune(value)
	for endIndex := 0; endIndex < len(runes); endIndex++ {
		if unicode.IsLetter(runes[endIndex]) {
			if isCounting {
				continue
			} else {
				startIndex = endIndex
				isCounting = true
			}
		} else {
			if isCounting {
				isCounting = false
				result = append(result, mapreduce.KeyValue{string(runes[startIndex:endIndex]), strconv.Itoa(1)})
				startIndex = -1
			} else {
				continue
			}
		}
	}
	return result
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	result := 0
	for _, value := range values {
		i1, err := strconv.Atoi(value)
		if err != nil {
			log.Fatal(err)
		}
		result += i1
	}
	return strconv.Itoa(result)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
